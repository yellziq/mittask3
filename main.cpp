#include <iostream> // Подключение библиотеки для ввода/вывода
#include <fstream> // Подключение библиотеки для работы с файлами
#include <list> // Подключение библиотеки для работы со списками
#include <map> // Подключение библиотеки для работы с отображениями

using namespace std; // Использование пространства имен std

map<int, list<int>> input_adj_list() // Функция для создания списка смежности
{
    ifstream in("input.txt"); // Открытие файла "input.txt" для чтения
    map<int, list<int>> l_Adj; // Создание отображения для хранения списка смежности
    int x, y; // Переменные для хранения вершин
    while (in.peek() != EOF) // Чтение файла до конца
    {
        in >> x >> y; // Считывание пары вершин
        auto it_x = l_Adj.find(x); // Поиск вершины x в списке смежности
        bool fl = true; // Флаг для проверки наличия ребра между вершинами
        if (it_x != l_Adj.end()) // Если вершина x уже есть в списке смежности
        {
            for (auto it_y = it_x->second.begin(); it_y != it_x->second.end(); it_y++) // Проверка наличия вершины y среди смежных вершин x
                if (*it_y == y) // Если вершина y уже смежная с вершиной x
                {
                    fl = false; // Устанавливаем флаг в false
                    break;
                }
        }
        if (fl) // Если ребра между вершинами нет
        {
            l_Adj[x].push_back(y); // Добавляем вершину y к списку смежности вершины x
            l_Adj[y].push_back(x); // Добавляем вершину x к списку смежности вершины y
        }
    }
    return l_Adj; // Возвращаем список смежности
}

void output_adj_list(map<int, list<int>> l_Adj) // Функция для вывода списка смежности
{
    for (auto it = l_Adj.begin(); it != l_Adj.end(); it++) // Перебор всех вершин в списке смежности
    {
        cout << it->first << " : "; // Выводим номер вершины
        for (auto it_1 = it->second.begin(); it_1 != it->second.end(); it_1++) // Перебор всех смежных вершин текущей вершины
            cout << *it_1 << "; "; // Выводим номера смежных вершин
        cout << endl; // Переход на новую строку
    }
    cout << endl; // Пустая строка для разделения вывода
}

void result(map<int, list<int>> l_Adj, int A) // Функция для вывода количества вершин, смежных с данной
{
    int count = 0; // Счетчик количества смежных вершин
    auto it_A = l_Adj.find(A); // Находим вершину A в списке смежности
    for (auto it_1 = it_A->second.begin(); it_1 != it_A->second.end(); it_1++) // Перебор всех смежных вершин вершины A
        count++; // Увеличиваем счетчик на 1
    cout << A << ": " << count; // Выводим номер вершины и количество смежных вершин
}

int main() // Точка входа в программу
{
    map<int, list<int>> l_Adj = input_adj_list(); // Создаем список смежности из файла
    output_adj_list(l_Adj); // Выводим список смежности
    result(l_Adj, 3); // Выводим количество вершин, смежных с вершиной 2
    return 0; // Возвращаем 0, что означает успешное завершение программы
}
